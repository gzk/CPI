/* ============================================================================
 * Project     : InfinitePrecision
 * Name        : factorial.cpp
 * Created on  : 2 f√©vr. 2011
 * Author      : iovleff
 * Copyright   : GPL
 * Description :
 * ============================================================================
 */
#include "Integer.h"

/*static const Integer factorialArray[51] =
{
                                                                1.0, //  0
                                                                1.0, //  1
                                                                2.0, //  2
                                                                6.0, //  3
                                                               24.0, //  4
                                                              120.0, //  5
                                                              720.0, //  6
                                                             5040.0, //  7
                                                            40320.0, //  8
                                                           362880.0, //  9
                                                          3628800.0, // 10
                                                         39916800.0, // 11
                                                        479001600.0, // 12
                                                       6227020800.0, // 13
                                                      87178291200.0, // 14
                                                    1307674368000.0, // 15
                                                   20922789888000.0, // 16
                                                  355687428096000.0, // 17
                                                 6402373705728000.0, // 18
                                               121645100408832000.0, // 19
                                              2432902008176640000.0, // 20
                                             51090942171709440000.0, // 21
                                           1124000727777607680000.0, // 22
                                          25852016738884976640000.0, // 23
                                         620448401733239439360000.0, // 24
                                       15511210043330985984000000.0, // 25
                                      403291461126605635584000000.0, // 26
                                    10888869450418352160768000000.0, // 27
                                   304888344611713860501504000000.0, // 28
                                  8841761993739701954543616000000.0, // 29
                                265252859812191058636308480000000.0, // 30
                               8222838654177922817725562880000000.0, // 31
                             263130836933693530167218012160000000.0, // 32
                            8683317618811886495518194401280000000.0, // 33
                          295232799039604140847618609643520000000.0, // 34
                        10333147966386144929666651337523200000000.0, // 35
                       371993326789901217467999448150835200000000.0, // 36
                     13763753091226345046315979581580902400000000.0, // 37
                    523022617466601111760007224100074291200000000.0, // 38
                  20397882081197443358640281739902897356800000000.0, // 39
                 815915283247897734345611269596115894272000000000.0, // 40
               33452526613163807108170062053440751665152000000000.0, // 41
             1405006117752879898543142606244511569936384000000000.0, // 42
            60415263063373835637355132068513997507264512000000000.0, // 43
          2658271574788448768043625811014615890319638528000000000.0, // 44
        119622220865480194561963161495657715064383733760000000000.0, // 45
       5502622159812088949850305428800254892961651752960000000000.0, // 46
     258623241511168180642964355153611979969197632389120000000000.0, // 47
   12413915592536072670862289047373375038521486354677760000000000.0, // 48
  608281864034267560872252163321295376887552831379210240000000000.0, // 49
30414093201713378043612608166064768844377641568960512000000000000.0  // 50
};
*/
#include "UInteger.h"
#include <stdlib.h>
#include <iostream>

using namespace std;

int main(int argc, char *argv[])
{


    /*unsigned long k =1;
    for(unsigned long i=1;i<=21;i++){
        k*=i;
        std::cout << i << "! =" << k << "\n";
    }*/
    long l1;
    cin >> l1;

    UInteger  j((long)1);
    // test factorial using operator*=(UInteger const&)
    for (long i =1; i<l1; ++i)
    {
        j = j * i;
        //std::cout << i << "! =" << j << "\n";
    }
    // test factorial using operator*(long) and operator=(UInteger const&)
    j = j * l1;
   // j.toBase(10);
    std::cout << l1<< "! =" << j << "\n";
    // AJOUTEZ ICI D'AUTRES TEST EXEMPLE 11! / 9!
    // .....

    return EXIT_SUCCESS;
}


